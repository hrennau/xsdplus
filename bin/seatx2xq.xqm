(:
 : -------------------------------------------------------------------------
 :
 : xqx2xq.xqm - Document me!
 :
 : -------------------------------------------------------------------------
 :)
 
module namespace f="http://www.xsdplus.org/ns/xquery-functions";
import module namespace tt="http://www.ttools.org/xquery-functions" at 
    "tt/_request.xqm",
    "tt/_reportAssistent.xqm",
    "tt/_errorAssistent.xqm",
    "tt/_log.xqm",
    "tt/_nameFilter.xqm",
    "tt/_pcollection.xqm";    
    
import module namespace app="http://www.xsdplus.org/ns/xquery-functions" at 
    "constants.xqm",
    "schemaLoader.xqm",
    "seatFunctions.xqm";
    
declare namespace z="http://www.xsdplus.org/ns/structure";
declare namespace zprev="http://www.xsdr.org/ns/structure";

(:~
 : Transforms an extended SEAT document into XQuery code.
 :
 : @param xqx XML representation of an XQuery query
 : @return XQuery code
 :) 
declare function f:seatx2xq($seatx as element(z:seatx))
        as item()* {
    let $codeWrapped :=

    <_>{
        text {string-join((
        "(:", 
        " ==============================================================",
        "   XQuery code generated by xsdplus.",
        "   ", concat("   Generation time: ", current-dateTime()),
        "",
        "   Do not edit this document.",
        "",
        "   Copyright xsdplus 2018",
        " ==============================================================",
        ":)",
        "",
        for $ns in $seatx/z:namespaces/z:namespace
        return text {concat("declare namespace ", $ns/@prefix, "='", $ns/@uri, "';")},

        for $param in $seatx/z:parameters/z:parameter 
        return
            concat("declare variable $", replace($param/@name, '.*\s+', ''), " as ", replace($param/@type, '\s.*', ''), ' external;')
        ,
        "",
        f:seatx2xq_valueMappers($seatx),
        f:seatx2xq_functions($seatx)
        ), '&#xA;')},
        text {'&#xA;'},   
        f:seatx2xqRC($seatx/descendant::z:set-context[1], 0)
    }</_>
    return
        $codeWrapped/node()
};

(:~
 : Recursive helper function of `seat2xq`.
 :
 : @param n the node to be processed
 : @return the XQuery code represented by this node
 :) 
declare function f:seatx2xqRC($n as node(), $level as xs:integer)
        as item()* {
    typeswitch($n)        
    case document-node() return
        document {
            for $c in $n/node() return f:seatx2xqRC($c, $level)
        }

    case element(z:sequence) return
        let $indent := f:xq_indent($level)
        let $children := $n/*
        return (
            concat($indent, '(&#xA;'),
            let $countChildren := count($children)
            for $child at $pos in $children return (
                f:seatx2xqRC($child, $level),
                text {',&#xA;'}[$pos lt $countChildren]
            ),                
            concat('&#xA;', $indent, ')')
        )

    case element(z:choice) return
        let $indent := f:xq_indent($level)
        return (
            let $branches := $n/*
            for $branch at $pos in $branches
            let $prefix := if ($pos eq 1) then () else 'else '
            let $line := concat($indent, $prefix, 'if (', $branch/@expr,  ') then')
            let $branchContent := $branch/* ! f:seatx2xqRC(., $level + 1)
            return (
                text {$line || '&#xA;'},
                $branchContent,
                text {'&#xA;'}
            )
            , 
            text {concat($indent, 'else ()')}
        )

    case element(z:set-var-context) return
        let $indent := f:xq_indent($level)
        let $children := $n/(* except z:var-context)
        let $returnNow := exists($children except $n/z:*)
        let $suffix := if ($returnNow) then ' return' else ()
        let $lines :=
            let $countVars := count($n/z:var-context/z:set-var)
            for $v at $pos in $n/z:var-context/z:set-var 
            let $name := $v/@name
            let $value := $v/@value
            return concat($indent, 'let $', $name, ' := ', $value,  $suffix[$pos eq $countVars])        
        let $following := $children ! f:seatx2xqRC(., $level)
        return (
            $lines ! text {. || '&#xA;'},
            $following
        )
        
    case element(z:set-context) return
        let $indent := f:xq_indent($level)
        let $children := $n/*
        let $returnNow := not($children/self::z:set-value)
        let $suffix := if ($returnNow) then ' return' else ()
        let $line := concat($indent, 'let $c := ', $n/@expr,  $suffix)        
        let $following := $children ! f:seatx2xqRC(., $level)
        return (
            text {$line || '&#xA;'},
            $following
        )
        
    case element(z:set-value) return
        let $nextLevel := $level + 1
        let $indent := f:xq_indent($level)
        let $nextIndent := f:xq_indent($nextLevel)
        let $children := $n/*
        let $returnNow := not($children/self::z:set-context)
        let $suffix := if ($returnNow) then ' return' else ()

        let $line := concat($indent, 'let $v := ', $n/@expr,  $suffix)
        let $following := $children ! f:seatx2xqRC(., $level)
        return (
            text {$line || '&#xA;'},
            $following
        )

    case element(z:if-value) return
        let $nextLevel := $level + 1
        let $indent := f:xq_indent($level)
        let $nextIndent := f:xq_indent($nextLevel)
        
        let $children := $n/*
        let $line := concat($indent, 'if (empty($v)) then () else')
        let $following := for $c in $children return f:seatx2xqRC($c, $level)
        return (
            text {$line || '&#xA;'},
            $following
        )

    case element(z:if-context) return
        let $nextLevel := $level + 1
        let $indent := f:xq_indent($level)
        let $nextIndent := f:xq_indent($nextLevel)
        
        let $children := $n/*
        let $line := concat($indent, 'if (empty($c)) then () else')
        let $following := $children ! f:seatx2xqRC(., $level)
        return (
            text {$line || '&#xA;'},
            $following
        )

    case element(z:for-each) return
        let $nextLevel := $level + 1
        let $indent := f:xq_indent($level)
        let $nextIndent := f:xq_indent($nextLevel)
        
        let $children := $n/*
        let $ex := $n/@expr
        let $line := text {concat($indent, 'for $c in ', $ex, ' return ')}
        let $following := for $c in $children return f:seatx2xqRC($c, $level)
        return (
            text {$line || '&#xA;'},
            $following
        )

    case element(z:attributes) return
        for $c in $n/* return f:seatx2xqRC($c, $level)
        
    case element() return
        let $nextLevel := $level + 1
        let $indent := f:xq_indent($level)
        let $nextIndent := f:xq_indent($nextLevel)
        
        let $isAttribute := $n/ancestor::z:attributes
        let $nname := $n/name()
        let $children := $n/(z:attributes/*, * except z:attributes)
        let $hasAttributes := exists($n/z:attributes/*)
        let $src := $n/@src/string()
        let $post := $n/@post/string()
        let $dflt := $n/@dflt/string()
        
        (: $code_scontent - code used to set simple content :)
        let $code_scontent :=
            let $string :=
                if ($src) then
                    if (not($post) and not($dflt)) then 
                        concat($nextIndent[$hasAttributes], $src)
                    else
                        string-join((
                            concat($nextIndent, "let $v := ", $src),
                            $post ! concat($nextIndent, "let $v := ", .),
                            if (not($dflt)) then concat($nextIndent, 'return $v')
                            else concat($nextIndent, 'return if (exists($v)) then $v else ', $dflt) 
                        ), '&#xA;')
                else if ($n/ancestor::z:set-value) then
                    if ($post) then concat($nextIndent[$hasAttributes], $post)
                    else concat($nextIndent[$hasAttributes], '$v')
                else ()
        return text {$string} [$string]                
            
        (: $code_ccontent - code used to set complex content :)
        let $code_ccontent := 
            if ($isAttribute) then () 
            else if (not($children)) then ()
            else (
                let $countChildren := count($children)
                for $c at $pos in $children 
                return (
                    f:seatx2xqRC($c, $level + 1),
                    text {',&#xA;'}[$pos lt $countChildren] 
                )
            )
                
        return
            (: attribute node 
               -------------- :)
            if ($isAttribute) then
                if (not(matches($code_scontent, '&#xA;'))) then
                    text {concat($indent, 'attribute ', $nname, ' {', $code_scontent, '}')}
                else
                    text {
                        string-join((
                            concat($indent, 'attribute ', $nname, ' {'),
                            $code_scontent,
                            concat($indent, '}')
                        ), '&#xA;')
                    }                   
                
            (: element node 
               ------------ :)
            else
                let $contentInline :=
                    empty($code_ccontent) and not(matches($code_scontent, '&#xA;'))
                let $sepComplexFromSimpleContent :=
                    if ($code_ccontent and $code_scontent) then ',&#xA;'
                    else ()
                let $node :=
                    element {node-name($n)} {
                        if ($contentInline) then concat('{', $code_scontent, '}')
                        else (
                            text {'{&#xA;'},
                            $code_ccontent,
                            $sepComplexFromSimpleContent,
                            $code_scontent,
                            text {concat('&#xA;', $indent, '}')}
                        )                            
                    }
                return (
                    text {$indent},
                    $node
                )
                    
    default return $n
};        
